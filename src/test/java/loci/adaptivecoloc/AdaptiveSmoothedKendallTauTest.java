/*
 * #%L
 * Adaptive colocalization algorithms.
 * %%
 * Copyright (C) 2018 - 2020 Board of Regents of the University of
 * Wisconsin-Madison.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package loci.adaptivecoloc;

import static org.junit.Assert.assertTrue;

import net.imagej.ops.OpService;
import net.imagej.ops.coloc.ColocalisationTest;
import net.imglib2.FinalInterval;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.histogram.Histogram1d;
import net.imglib2.img.Img;
import net.imglib2.img.array.ArrayImg;
import net.imglib2.img.array.ArrayImgs;
import net.imglib2.img.basictypeaccess.array.ByteArray;
import net.imglib2.img.basictypeaccess.array.DoubleArray;
import net.imglib2.type.numeric.RealType;
import net.imglib2.type.numeric.integer.UnsignedByteType;
import net.imglib2.type.numeric.real.DoubleType;
import net.imglib2.type.numeric.real.FloatType;
import net.imglib2.util.Intervals;
import net.imglib2.util.Util;
import net.imglib2.view.IntervalView;
import net.imglib2.view.Views;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.scijava.Context;

/**
 * Tests {@link AdaptiveSmoothedKendallTau}.
 *
 * @author Curtis Rueden
 * @author Ellen TA Dobson
 */
public final class AdaptiveSmoothedKendallTauTest {

	private Context context;
	private OpService ops;

	@Before
	public void setUp() {
		context = new Context(OpService.class);
		ops = context.service(OpService.class);
	}

	@After
	public void tearDown() {
		context.dispose();
		context = null;
		ops = null;
	}

	@Test
	public void testGeneratedUint8() {
		final Img<UnsignedByteType> img = generateUnsignedByteArrayTestImg(true, 22,
			13);
		final IntervalView<UnsignedByteType> img1 = Views.interval(img, new long[] {
			0, 0 }, new long[] { 10, 12 });
		final IntervalView<UnsignedByteType> img2 = Views.zeroMin(Views.interval(
			img, new long[] { 11, 0 }, new long[] { 21, 12 }));
		final Histogram1d<UnsignedByteType> hist1 = ops.image().histogram(img1);
		final Histogram1d<UnsignedByteType> hist2 = ops.image().histogram(img2);
		final UnsignedByteType thres1 = ops.threshold().otsu(hist1);
		final UnsignedByteType thres2 = ops.threshold().otsu(hist2);
		final RandomAccessibleInterval<DoubleType> result = Util
			.getSuitableImgFactory(img1, new DoubleType()).create(img1);
		AdaptiveSmoothedKendallTau.execute(img1, img2, thres1, thres2,
			new DoubleType(), result, 0xdeadbeef, false);

		// for (DoubleType p : Views.flatIterable(result)) System.out.println(p);

		final double[] array = { -1.6181999650843224, -1.6692541826121903,
			-1.797134104021077, -1.6177968426853286, -1.622864085947528,
			-1.461741740787677, -0.9511750080512051, -0.6935294529281967,
			-0.3910788955119857, -0.18063358000884472, 0.043089096434922876,
			-1.758679176941941, -1.7816414392244284, -1.7572912900659217,
			-1.5300517355132888, -1.5966814203484891, -1.269548145815111,
			-0.7768407537033446, -0.4207407390770802, -0.17841272262733213,
			0.04367163538433323, -0.01235316649379195, -1.8439387662754778,
			-1.8029567166958491, -1.6583429330082478, -1.6089787594313796,
			-1.2665223526845435, -0.694269815999098, -0.10764549948314517,
			0.361886132778233, 0.3318782280103717, 0.22073469238151922,
			0.3923733461887513, -1.8901097518327457, -1.8798269183478102,
			-1.6376645131423393, -1.2059212376194541, -0.9024906025634676,
			-0.3564289685437558, 0.35732723555739243, 0.7215324164649339,
			0.8161961104300935, 0.6931887579645751, 1.2251030546458468,
			-1.8776582971392217, -1.8558343668802957, -1.8376011947939446,
			-1.2738868285526226, -0.683421837753068, -0.1973762028481857,
			-0.008822107627211792, 0.7043326221615681, 0.6900206542275737,
			1.1084319660302904, 1.559269472977232, -1.777185627235522,
			-1.7949256193337866, -1.6839557309867974, -0.8407221110444097,
			-0.6335878133630602, -0.052536891705688975, 0.4220129743083615,
			1.07870690896853, 1.0913861000071208, 1.2052735922339268,
			1.3780815618036926, -1.6578862120118476, -1.6814342615811637,
			-1.5403697645944123, -0.7587816767994532, -0.314929231631378,
			-0.026180618183747256, 0.8560246090287442, 0.9785573992368168,
			1.1961158847570088, 1.2487305369542412, 1.2926169533239602,
			-1.5303695978896914, -1.2016373756931669, -0.6484753925981623,
			-0.11308353014655943, 0.014507591657459133, -0.012595189064938476,
			0.2378189790861866, 0.818239749998994, 1.1479499442893115,
			1.2715835225481933, 1.1795153770980566, -0.20004451981212154,
			-0.1795288407047667, -0.23107889006384524, 0.12422701742380644,
			0.5994303468816401, 0.12225364754335835, 0.10697386697980923,
			0.8894908826224073, 1.0261646820609474, 1.2388353933610659,
			1.1651912899895032, 0.27445692224412843, 0.040383372353850165,
			-0.02117101948072973, 0.4263540784807859, 0.331678860165354,
			0.18015879221036338, 0.864322321877723, 1.0747382435577932,
			1.0197938855075876, 0.992558332845964, 0.9894458024927084,
			0.7229442570155112, 0.31946933123247045, 0.2216753125982005,
			0.5487265809204592, 0.4760630696036352, 0.8949310849341378,
			1.107044902816161, 1.0026184803567644, 0.5222410819918457,
			0.5408801378457266, 0.5053187390618805, 0.9307681229673059,
			0.44480671032400176, 0.3978933689704214, 0.5746450417139425,
			0.3393729464412223, 0.42939271101723486, 0.6032189446613707,
			-0.025599803254239963, -0.2622119094518492, -0.06398626609225956,
			0.11025775800531715, 1.1261785587755226, 0.5410453898422657,
			0.3043775928402, 0.3322385842630161, 0.15760798963562145,
			0.12300133237567107, 0.24144218394437683, -0.12983261614807654,
			-0.4248069879378139, -0.33343126551972546, -0.25760762213287436 };
		final Img<DoubleType> expected = ArrayImgs.doubles(array, 11, 13);
		assertTrue(Util.imagesEqual(expected, result));
	}

	@Test
	public void testMeanBasedNoiseImages() {
		final double mean = 0.2;
		final double spread = 0.1;
		final double[] sigma = new double[] { 3.0, 3.0 };
		final Img<FloatType> ch1 = ColocalisationTest.produceMeanBasedNoiseImage(
			new FloatType(), 24, 24, mean, spread, sigma, 0x01234567);
		final Img<FloatType> ch2 = ColocalisationTest.produceMeanBasedNoiseImage(
			new FloatType(), 24, 24, mean, spread, sigma, 0x98765432);
		final ArrayImg<DoubleType, DoubleArray> result = ArrayImgs.doubles(24, 24);

		final FloatType thres1 = threshold(ch1);
		final FloatType thres2 = threshold(ch2);
		AdaptiveSmoothedKendallTau.execute(ch1, ch2, thres1, thres2, result,
			0xdeadbeef, true);
//		for (final DoubleType p : result)
//			System.out.println(p + ",");
		final double[] expected = { -0.5783943685583925, -0.4873345042857431,
			-0.389601968988217, -0.2847677597617397, -0.16975987166011608,
			-0.03680593149135552, 0.129682801176243, 0.3596360485055935,
			0.8767581630437056, 1.4043214824718881, 0.0, 1.125637194716325,
			Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
			0.611398270198716, 0.6057044030981913, 0.6158756402847492,
			0.6361717882178696, 0.6647366170659236, 0.7043942127181212,
			0.7639657063704759, 0.9843834331655255, 1.4142148573205071,
			1.7210646460077053, 2.0486796314700535, 0.0, 2.0694121896470605, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.539892085453177,
			1.4843080161704911, 1.455951245305498, 1.4408262301332262,
			1.4309509817406918, 1.4289856995778605, 1.4630533816422473,
			1.5847939464138734, 1.8166947266734441, 2.1266136686643815,
			2.2060070194513717, 1.8116992357942976, 2.4953434119057536, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.118859688722528,
			2.046266006731338, 1.9922517032307376, 1.9443793994493257,
			1.893565149428193, 1.8462676879455078, 1.8294662000921618,
			1.8050781622937047, 1.9290956544119067, 2.2266785999728804,
			2.4240710475699494, 2.004181832583781, 2.8544997086576918, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.1128625953874223,
			2.0732140498188443, 2.045593513645301, 2.0160043736353286,
			1.959996103750841, 1.8956042206552703, 1.8295371301147587,
			1.79224404531073, 1.8880252056554148, 2.1875413833649393,
			2.3724755888789106, 1.9063856080678527, 2.1946245047840724, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.037720295789358,
			2.002222740616662, 1.9856268351764808, 1.9680604547470215,
			1.913745695405376, 1.8102230616174393, 1.7095477236889176,
			1.6947710342843014, 1.7699837401631329, 2.067736209087797,
			2.2261697501039235, 1.6526171316635954, 1.1594873231401381, 0.0, 0.0,
			Double.NaN, -2.0694121896470614, -2.0999370596719267, -2.1110609381169407,
			-2.116268482297665, -2.119044198510165, -2.1205559486600256,
			-2.121237986375533, -2.121237986375533, 1.9697394513731625,
			1.9375820229889413, 1.9303947987316463, 1.9464532770034744,
			1.8506264636541028, 1.6592043524480689, 1.5568549907810953,
			1.5761786145831043, 1.6917191939545622, 1.9966295763982638,
			2.153052646111081, 1.533469511952498, 0.7428219046410824, Double.NaN,
			-2.0694121896470614, -2.91016553089214, 0.0, -3.613782188456981,
			-3.638900228363843, -3.6486781199306035, -3.6501632251102736,
			-3.6459326652289157, -3.63686478235224, -3.6228769630440016,
			1.870874199148819, 1.8191895060099728, 1.7682827077435102,
			1.66991899160695, 1.489987991252359, 1.357433478850448,
			1.2946210876947097, 1.366260922567661, 1.5545718987747867,
			1.8642283745001094, 1.9345095048732022, 0.7897375909634852,
			-1.3208886760090763, -1.2173697194042863, 0.0, -3.3868661856623437,
			-4.281353494407375, -4.394720833527156, -4.624708133822969,
			-4.696311269376518, -4.738964488243363, -4.76070166148922,
			-4.765732006831004, -4.755729229905951, 1.7719244451444713,
			1.6699643033824412, 1.5058993670383227, 1.2732989553963057,
			1.0159491408878627, 0.8447531226837831, 0.9268453696790838,
			1.1700270928910805, 1.4751512506456708, 1.6429538036081164,
			1.2234743149594647, -0.7004544118302997, -1.2697265594417817,
			-0.04522732701008253, -2.2009990907668406, -2.2463575896602874,
			-4.794413746699156, -4.997166574637157, -5.05299587584979,
			-5.0758881252745365, -5.078878925961354, -5.067501747930787,
			-5.044015721802683, -5.010686038157175, 1.6784746757400892,
			1.4606704227997098, 0.9671539872705992, 0.36303800466455793,
			0.10385945049641565, 0.07875848498398594, 0.4205807536390497,
			0.9032640393188852, 1.3937926093619304, 1.5217740174531296,
			0.8583418390272284, -1.9995419760066275, -1.1217134783229719,
			1.477599571052769, -0.371494960225288, -3.828849865281378,
			-4.897171788103615, -5.095324063911589, -5.122788263824742,
			-5.132713980500715, -5.12852250845309, -5.112034756347172,
			-5.086055322545744, -5.054381950344547, 1.5131033992677425,
			-2.8990228490356422, -3.403803778346024, -2.746418122658196,
			-2.0913469703632805, -1.404104439532669, -0.6771428643374746,
			0.16488693802254956, 0.9665907153145934, 1.2545412031987278,
			0.4695801694329117, -1.1773142815928321, 0.3930892440143221,
			2.283572966589414, 2.171849995115841, -0.8423376381543155,
			-4.4992502215021934, -4.825274019553172, -4.889993837508124,
			-4.923060304619392, -4.940678357825132, -4.943959700876965,
			-4.93622078966095, -4.925199583829533, -4.90826932175143,
			-4.843772067086345, -4.454358055276495, -3.747710340145911,
			-3.150467743239724, -2.6613911596979465, -2.2107120494218933,
			-1.077259690769613, 0.4557106460061897, 1.0789606823822921,
			0.11783652887376687, -0.6289750539677805, 1.9279892114091821,
			3.0979362596613274, 3.1463013090955867, 3.1910948867235236,
			-3.8406285437641103, -4.578930228918854, -4.702997274062173,
			-4.793030877099143, -4.846444142869462, -4.861522375961737,
			-4.853117028999186, -4.839955858904924, -4.916867449974368,
			-4.884196682396416, -4.661070425595419, -4.121994978672877,
			-3.516320709533565, -3.084454384007841, -2.73189741023954,
			-1.9420142098988693, 0.16917633017452843, 1.455539067032322,
			-0.025246117813269704, 1.2215344328387368, 3.023557645922503,
			3.6768244637340963, 3.7631681660060936, 3.8382656198667284,
			3.8937817371827617, -4.460211612757159, -4.633882828996319,
			-4.757422920794264, -4.833433141301647, -4.882651586448237,
			-4.893863743442463, -4.862694345636884, -4.897098064253727,
			-4.860858417890489, -4.700696051345327, -4.31078216899257,
			-3.830257137063956, -3.4119485851338016, -3.0329679311949755,
			-2.2965404361885295, 0.5465192998984916, 1.8933094445101144,
			0.9804293051615264, 2.439487758413981, 3.3006176574652466,
			3.7329726349118024, 3.8427997969989565, 3.934338966578249,
			4.010755117155105, -4.248142573679885, -4.444068093383743,
			-4.59190380423513, -4.7296746498464355, -4.788138772896261,
			-4.780524425089918, -4.792739950170974, -4.861428330401839,
			-4.822521912664293, -4.690222813679711, -4.38352056055425,
			-4.015988549615768, -3.6668467439468895, -3.2439723829782623,
			-2.2629767480349487, 1.9760431137139656, 1.7791905956093959,
			1.7838146942644886, 2.8388281977313814, 3.2715543919518755,
			3.567203130580262, 3.683635479031854, 3.832353600537113,
			3.9693158010164717, -4.009067062130276, -4.240483914895646,
			-4.379793362450271, -4.479449808673186, -4.563089509760886,
			-4.621537347417336, -4.654717539870204, -4.5014170231681625,
			-4.468424921040534, -4.3560325871802785, -4.077351590968088,
			-3.7593361734413504, -3.4060356856333307, -2.827086248696886,
			-0.3231812058571659, 2.157056082473989, 1.5811550134910735,
			2.1738669647844233, 3.1393922177399407, 3.4363062697746427,
			3.6881346972927442, 3.798750561770654, 3.925304706896794,
			4.0424226219478925, -3.626106289168547, -3.914317729860188,
			-4.025632401598336, -4.102818995045004, -4.203940811790818,
			-4.4117746869961545, -4.55283269988058, -3.879866196388498,
			-3.740734028854645, -3.398679584355734, -2.9729509021318936,
			-2.622307024622176, -2.16746573691203, -0.6059013922050461,
			1.5409939412395324, 1.1888127092012892, 0.9372104040749627,
			2.2816118985907203, 3.4059748653731194, 3.6725726490742607,
			3.911468147309468, 4.14489991009444, 4.429938608459069, 4.675423875625213,
			4.7251827012022956, -3.4734276608890684, -3.7324036174739055,
			-3.882582819780344, -3.9352379183503645, -4.035984610605307,
			-4.373573267670974, -0.07476034655129304, 0.5447508454531865,
			0.565112168428682, 0.5209258698515423, 0.42246991498478437,
			1.5530091737590936, 1.3246665728287255, 0.34744155385535613,
			-0.03182078341353632, 0.04373357194747016, 2.230584809778654,
			3.538033354618407, 3.827743581002163, 4.182016278122363,
			4.6656728282491375, 5.000049033719119, 5.114942971005325,
			-1.8168317158299723, -2.994399267331241, -3.5044270948388805,
			-3.698074344377522, -3.7606083554821232, -3.7988184733172234,
			-3.9875220077284834, 1.5979818210252539, 1.5950013991360148,
			1.5777079878536306, 1.5466250519522449, 1.5026275628594425,
			1.6169585245550895, -0.2446302634936199, -0.4155616880157914,
			-0.1898275356977862, -0.5168604723562555, 2.2392724227710668,
			3.6602846343719126, 3.995629703548601, 4.535280851663492,
			5.000455566385228, 5.187119190525231, 5.2466671959409314,
			0.2743248645615834, -2.504130179742538, -3.2790465311373045,
			-3.5426759673793846, -3.6054117962128878, -3.6139234268542513,
			-3.6348876869106985, 1.5040251464590622, 1.4995791507724086,
			1.4907178021673322, 1.4767324845897896, 1.457193705998276,
			1.3041616534149858, -0.30968734286899124, -0.21919736109384041,
			-0.3385676553425202, -0.36319731437450437, -0.12490323828903283,
			1.2626700633789922, 1.8947344731990599, 4.664201760181241,
			4.994508445363282, 5.167013181292108, 5.197888171677883,
			4.881091512217329, -1.1701837575985534, -2.9014932903259876,
			-3.2852440645231704, -3.3587122983652233, -3.318687623380367,
			-3.252476016642096, 1.3584575289742764, 1.3648823935689656,
			1.3744644069088703, 1.3822553834556999, 1.38506928900999,
			1.0046990932498592, -0.3737835324563883, -0.297299786523651,
			-0.5232639765816179, -0.6467319036804487, -0.0869306121128292,
			1.426215846911, 1.0245333345699155, 4.6482590261827665, 4.860490551739928,
			5.001389325307191, 5.059146880821627, 5.01265580861036, 3.597166113993233,
			-1.5210913510359314, -2.58645255828299, -2.7688934895189714,
			-2.739870286939286, -2.615827816896806, 0.9672408169548057,
			0.9783719194718745, 1.007455728925042, 1.0353051696555278,
			1.0528317888658587, 0.6122571607096444, -0.7500328822004996,
			-0.6628803759101258, -1.0448924550541332, -1.5267582349381468,
			0.012119800986534385, 1.4100922151676614, 0.8235074742238907,
			4.590792079656105, 4.773611912772195, 4.891186831347404,
			4.963111456880569, 4.965119131921106, 4.973649465054675,
			3.6594815047606546, -1.1826201985901055, -2.1031691324922415,
			-2.1697847509419548, -2.0323266354915224, 0.2648592843385561,
			0.266442870358775, 0.32392316003220034, 0.3659177948133035,
			0.3842029680078333, 0.11759831449414182, -1.03735021074072,
			-1.4943827998844266, -2.107661392542334, -1.7136396667834657,
			0.44611707493429154, 1.6119071307232558, 0.9876736116957197,
			4.369346977270434, 4.77413592098645, 4.896673450224503, 4.96037446148031,
			4.965311282066385, 4.959096731205308, 4.93822773137453,
			3.9099216952814233, -0.8671721707428532, -1.6848020864262243,
			-1.7668776811234417, -0.6336970871784128, -0.5799824161343782,
			-0.5440462816982834, -0.5518169436899378, -0.549826853899539,
			-0.6294152634748316, -1.454081125989707, -2.0014016635668823,
			-2.366077556989525, -1.638485764109433, 0.345063396443292,
			1.6646720523261238, 1.2333412011040723, 1.5693685761973857,
			4.576500211254427, 4.832466450458615, 4.891093266970232,
			4.915012401194416, 4.9146569294907385, 4.896451924305591,
			4.697933737483878, 2.3074193128145035, -0.7513660616051043,
			-1.3115046000598534 };
		final ArrayImg<DoubleType, DoubleArray> expectedImg = ArrayImgs.doubles(
			expected, 24, 24);
		assertTrue(Util.imagesEqual(expectedImg, result));
	}

	private <V extends RealType<V>> V threshold(
		final RandomAccessibleInterval<V> image)
	{
		final Histogram1d<V> histogram = ops.image().histogram(Views.iterable(
			image));
		return ops.threshold().otsu(histogram);
	}

	private ArrayImg<UnsignedByteType, ByteArray>
		generateUnsignedByteArrayTestImg(final boolean fill, final long... dims)
	{
		final byte[] array = new byte[(int) Intervals.numElements(new FinalInterval(
			dims))];

		if (fill) {
			seed = 17;
			for (int i = 0; i < array.length; i++) {
				array[i] = (byte) pseudoRandom();
			}
		}

		return ArrayImgs.unsignedBytes(array, dims);
	}

	private int seed;

	private int pseudoRandom() {
		return seed = 3170425 * seed + 132102;
	}
}
